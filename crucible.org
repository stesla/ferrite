* Registers
** s - stack used for evaluations
** e - environment used for bound values
** c - code to be evaluated
** d - stack to store values from the other registers
* Instructions
** Values
*** (NIL) - Put a nil on the stack
s e (NIL . c) d -> (NIL . s) e c d

*** (LDC k) - Put a constant on the stack
s e (LDC k . c) d -> (k . s) e c d

*** (LD (i . j)) - Put the jth value of the ith list in e on the stack
s e (LD (i . j) . c) d -> (locate((i, j, e) . s) e c d

**** locate :: Int -> Int -> ((Int))
     locate(0, 0, ((1))        -> 1
     locate(1, 1, ((1) (2 3))) -> 3
     locate(_, _, _)           -> error
     
** Predicates
*** (EQ)
Places #t on the top of the stack if the top two values are the
same, #f otherwise.

*** (ATOMP)
Places #t on the top of the stack if the top value is an immediate
value, or a string pointer, #f otherwise.

** Conditional
*** (SEL ct cf) - Conditionally execute ct or cf depending on the value on the stack
(#t . s) e (SEL ct cf . c) d -> s e ct (c . d)
(#f . s) e (SEL ct cf . c) d -> s e cf (c . d)
(_ . s) e (SEL ct cf . c) d -> error

*** (JOIN) - Return to main control after executing conditional branch
s e (JOIN) (c . d) -> s e c d
** Function Application
*** (LDF f) - Put the compiled function f on the stack with its closure
s e (LDF f . c) d -> ((f . e) . s) e c d

*** (AP) - Apply a function
((f . e') v . s) e (AP . c) d -> NIL e' f (s e c . d)

*** (RTN) - Return from a function application
(x . s) e (RTN . c) (s' e' c' . d) -> (x . s') e' c' d

** List Structure
*** (CONS) - Create a cons cell
(x y . s) e (CONS . c) d -> ((x . y) . s) e c d

*** (CAR) - Get the first value in a cons cell
((x . y) . s) e (CAR . c) d -> (x . s) e c d

*** (CDR) - Get the second value in a cons cell
((x . y) . s) e (CDR . c) d -> (y . s) e c d

** Math
Each of these works like this:
(y x . s) e (OP . c) d -> (z . s) e c d where z = x OP y
*** (ADD)
*** (SUB)
*** (MUL)
*** (DIV)
** I/O
*** (GET)
(f . s) e (GET . c) d -> (x . s) e c d
read a single character x from the file descriptor f

*** (PUT)
(f x . s) e (PUT . c) d -> s e c d where x is a character
x will be output to file descriptor f

*** (READ)
(f . s) e (READ . c) d -> (x . s) e c d
read a sexp x from file descriptor f

*** (PRINT)
(f x . s) e (PRINT . c) d -> s e c d where x is a string
x will be output to file descriptor f as a sexp

* Memory
Values are represented in memory as tagged pointers. By allocating on
8-byte boundaries, we can get three low-order bits to play around
with.
** References
*** x00 - Fixnum
*** x10 - Other Immediate (e.g. nil, true, false, characters, etc.)
**** x 0001 0010 - Op Code (see types.h)
**** x 0010 0010 - ASCII character (next byte holds character)
**** x 0011 0010 - non-parse-able values
***** 0x32 - READ_BYTE (read.c)
This is used by the parser to indicate that the next value on the
stack should be read as if it had come from the input. The parser
pushes this onto the stack after its read an identifier or a number
(because it only knows to stop reading those when it finds the first
character that isn't one of those);

**** 0010 - 0x02 - NIL
**** 1010 - 0x0A - #f
**** 1110 - 0x0E - #t

*** xx1 - Pointer
**** 001 - Cons
**** 011 - Function
The actual object is just a cons cell (body . env), but it avoids an
memory access to test if the object is a function.
**** 101 - String
**** 111 - Other
** Objects in Memory
All objects in memory begin with a tag byte.

*** 0x01 - Cons
[0x01 | 8 bytes for car | 8 bytes for cdr]

*** 0x05 - String
[0x05 | 4 bytes for size | size bytes for string]]

** Garbage Collection
Cheney copying collector, with the registers as roots. If it must grow
the amount of RAM available, it allocates a page twice as big.
